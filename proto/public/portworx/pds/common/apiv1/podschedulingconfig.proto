// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

syntax = "proto3";

package public.portworx.pds.common.v1;

import "proto-vendor/buf/validate/validate.proto";

option go_package = "github.com/portworx/portworxapis/proto/public/portworx/pds/common/apiv1;common";
option java_multiple_files = true;
option java_package = "com.public.portworx.pds.common.v1";
option java_outer_classname = "PodSchedulingConfigProto";

// PodSchedulingConfig represents the configuration for scheduling pods.
message PodSchedulingConfig {
  // Tolerations to be applied on the application pods.
  repeated Toleration tolerations = 1;
}

// Toleration represents a Kubernetes toleration.
message Toleration {
  option (buf.validate.message).cel = {
    id :"when_key_is_empty_operator_must_be_equal_to_Exists",
    message: "when `key` is empty operator must be equal to Exists, which means match all values and all keys"
    expression:
      "this.key == '' && this.operator != 'Exists' ? false : true"
  };

  // Note: If operator is unspecified, it defaults to "Equal" as per k8s spec.
  option (buf.validate.message).cel = {
    id :"when_op_is_Equal_value_must_be_valid_k8s_label_value",
    message: "a valid label value must be an empty string or consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character"
    expression:
      "this.operator in ['', 'Equal'] ? this.value.matches('^([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$') : true"
  };

  option (buf.validate.message).cel = {
    id :"when_op_Exists_value_must_be_emtpy",
    message: "when operator is Exists, value must be empty "
    expression:
      "this.operator == 'Exists' ? this.value == '' : true"
  };

  // Key is the key of the toleration.
  string key = 1 [(buf.validate.field) = {
    string: {
      max_len: 63
    },
    cel: [
      {
        message: "a qualified name must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc', regex used for validation is '([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]') with an optional DNS subdomain prefix and '/' (e.g. 'example.com/MyName')",
        expression:
          "this != '' ? "
          "(size(this.split('/')) == 1 && this.split('/')[0].matches('^([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$')) || "
          "(size(this.split('/')) == 2 && this.split('/')[0].matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$') && this.split('/')[1].matches('^([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$'))"
          " : true"
        }
    ]
  }];

  // Operator is the operator for the toleration.
  // Valid operators are Exists, Equal.
  // Defaults to "Equal" if not specified.
  string operator = 2[(buf.validate.field).string = {
    in: ["Exists", "Equal", ""],
  }];

  // Value is the value of the toleration.
  string value = 3[(buf.validate.field) = {
    string: {
      max_len: 63,
    },
  }];

  // Effect is the effect for the toleration.
  // Valid effects are NoSchedule, PreferNoSchedule, NoExecute.
  // An empty effect matches all effects.
  string effect = 4[(buf.validate.field).string = {
    in: ["NoSchedule", "PreferNoSchedule", "NoExecute", ""],
  }];
}
