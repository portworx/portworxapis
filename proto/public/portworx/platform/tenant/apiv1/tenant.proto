// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitespace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

syntax = "proto3";

package public.portworx.platform.tenant.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "public/portworx/common/apiv1/sort.proto";
import "public/portworx/common/apiv1/meta.proto";
import "public/portworx/common/apiv1/pagination.proto";
import "public/portworx/common/apiv1/selector.proto";

option go_package = "github.com/portworx/portworxapis/proto/public/portworx/platform/tenant/apiv1;tenant";
option java_multiple_files = true;
option java_package = "com.public.portworx.platform.tenant.v1";
option java_outer_classname = "TenantProto";


// Tenant (Organization) service provides APIs to interact with the Organization entity.
service TenantService {

  // GetTenant API returns the info about  for given Tenant (Organization) id.
  rpc GetTenant(GetTenantRequest)
      returns (Tenant) {
    option(google.api.http) = {
      get: "/core/v1/tenants/{tenant_id}"
    };
  }

  // CreateTenant API creates a new Tenant (Organization).
  rpc CreateTenant(CreateTenantRequest)
      returns (Tenant) {
    option(google.api.http) = {
      post: "/core/v1/tenants"
      body: "tenant"
    };
  }

  // UpdateTenant API updates Tenant (Organization).
  rpc UpdateTenant(UpdateTenantRequest)
      returns (Tenant) {
    option(google.api.http) = {
      put: "/core/v1/tenants/{tenant.meta.uid}"
      body: "tenant"
    };
  }

  // DeleteTenant removes a Tenant (Organization) record.
  rpc DeleteTenant(DeleteTenantRequest)
      returns (google.protobuf.Empty) {
    option(google.api.http) = {
      delete: "/core/v1/tenants/{tenant_id}"
    };
  }

  // (-- api-linter: core::0132::http-body=disabled
  //     api-linter: core::0132::http-method=disabled
  //     aip.dev/not-precedent: We need to do this because
  // we can't have advance filters as query params.
  // --)
  // ListTenants API lists the Tenants (Organizations) visible to the caller for the current account.
  rpc ListTenants(ListTenantsRequest)
      returns (ListTenantsResponse) {
    option(google.api.http) = {
      get: "/core/v1/tenants"
      additional_bindings: {
        post: "/core/v1/tenants:search"
        body: "*"
      }
    };
  }

  // (-- api-linter: core::0132::request-message-name=disabled
  // (-- api-linter: core::0131::response-message-name=disabled
  //     aip.dev/not-precedent: We need to do this because of api design. --)
  // GetResourceCount will fetch the count of each resource under the given Tenant (Organization).
  rpc GetResourceCount(GetResourceCountRequest)
      returns (GetResourceCountResponse) {
    option(google.api.http) = {
      get: "/core/v1/tenants/{tenant_id}/resource:verbose"
    };
  }
}

// GetResourceCountRequest is the request message to list resources under a Tenant (Organization).
message GetResourceCountRequest {
  // Tenant (Organization) id for which the resource count has to be listed.
  string tenant_id = 1;
}

// (-- api-linter: core::0132::response-unknown-fields=disabled
// (-- api-linter: core::0158::response-repeated-first-field=disabled
// (-- api-linter: core::0158::response-plural-first-field=disabled
//     aip.dev/not-precedent: We really need this field because of api design. --)
// GetResourceCountResponse contsins list of resource count under a Tenant (Organization).
message GetResourceCountResponse {
  // Metadata of the Tenant (Organization).
  public.portworx.common.v1.Meta meta = 1;
  // Number of projects under the given Tenant (Organization).
  int32 project = 2;
  // Number of clusters under the given Tenant (Organization).
  int32 target_cluster = 3;
  // Number of namespaces under the given Tenant (Organization).
  int32 namespace = 4;
  // Number of credentials under the given Tenant (Organization).
  int32 credential = 5;
  // Number of backup location under the given Tenant (Organization).
  int32 backup_location = 6;
  // Number of backup policies under the given Tenant (Organization).
  int32 backup_policy = 7;
  // Number of templates under the given Tenant (Organization).
  int32 template = 8;
  // Number of data service deployments under the given Tenant (Organization).
  int32 data_service_deployment = 9;
  // Number of backups under the given Tenant (Organization).
  int32 backup = 10;
  // Number of restores under the given Tenant (Organization).
  int32 restore = 11;
}

// ListTenantsRequest  is the request message to the ListTenants API.
message ListTenantsRequest {
  // Pagination parameters for listing Tenants (Organizations).
  public.portworx.common.v1.PageBasedPaginationRequest pagination = 1;
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for resource_selector. --)
  // Filtering list of Tenants (Organizations) based on the provided resource details..
  public.portworx.common.v1.ResourceSelector resource_selector = 2;
  // Field selector is used to filter Tenants (Organizations) based on fields.
  public.portworx.common.v1.Selector field_selector = 3;
  // Response data flags for the behaviour of the list response attributes.
  public.portworx.common.v1.RespData resp_data = 4;
  // Sorting details using which requested list to be sorted.
  public.portworx.common.v1.Sort sort = 5;
}

// ListTenantsResponse is the response message to the ListTenants API and contains
// the list of Tenants (Organizations) visible to the caller.
message ListTenantsResponse {
  // list of Tenant (Organization).
  repeated Tenant tenants = 1;
  // Pagination metadata for this response.
  // (-- api-linter: core::0132::response-unknown-fields=disabled
  //     aip.dev/not-precedent: We need this field for pagination. --)
  public.portworx.common.v1.PageBasedPaginationResponse pagination = 2;
}

// Request for getting  a Tenant (Organization).
message GetTenantRequest {
  // ID of the Tenant (Organization) which needs to get info.
  string tenant_id = 1;
}

// Request for updating a tenant.
message UpdateTenantRequest {
  //Tenant (Organization) which needs to be updated.
  Tenant tenant = 1;
}

// Request for creating a Tenant (Organization).
message CreateTenantRequest {
  // Tenant (Organization) details which to be created.
  Tenant tenant = 1;
}

// Request for deleting a Tenant (Organization).
message DeleteTenantRequest {
  // ID of the Tenant (Organization) which needs to be deleted.
  string tenant_id = 1;
}

// Tenant is an organizational subunit of an account that represents an org or a unit of a large company.
// A tenant comprises multiple projects.
message Tenant {
  // Metadata of the Tenant (Organization).
  public.portworx.common.v1.Meta meta = 1;
  // status of the Tenant (Organization).
  Status status = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Status represents the current state of the Tenant (Organization).
message Status {
  // Textual information for the current state of the Tenant (Organization).
  string reason = 1;
  // Current phase of the project.
  Phase.Type phase = 2;
}

// Phase represents the current status of the Tenant (Organization).
message Phase {
  // Type of phase the Tenant (Organization) is in currently should be one of the below.
  enum Type {
    // Unspecified, do not use.
    TYPE_UNSPECIFIED = 0;
    // The Tenant (Organization) is in use and active.
    ACTIVE = 1;
    // Deletion of Tenant (Organization) has not started.
    DELETE_PENDING = 2;
    // Deletion of the Tenant (Organization) is scheduled and in progress.
    DELETE_IN_PROGRESS = 3;
    // Deletion is failed
    DELETE_FAILED=4;
  }
}