// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: public/portworx/pds/copilot/apiv1/copilot.proto

package copilot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CopilotService_SearchQuery_FullMethodName = "/public.portworx.pds.copilot.v1.CopilotService/SearchQuery"
)

// CopilotServiceClient is the client API for CopilotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CopilotService serves copilot search api.
type CopilotServiceClient interface {
	// Search dataservice queries.
	SearchQuery(ctx context.Context, in *SearchQueryRequest, opts ...grpc.CallOption) (*SearchQueryResponse, error)
}

type copilotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCopilotServiceClient(cc grpc.ClientConnInterface) CopilotServiceClient {
	return &copilotServiceClient{cc}
}

func (c *copilotServiceClient) SearchQuery(ctx context.Context, in *SearchQueryRequest, opts ...grpc.CallOption) (*SearchQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchQueryResponse)
	err := c.cc.Invoke(ctx, CopilotService_SearchQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CopilotServiceServer is the server API for CopilotService service.
// All implementations must embed UnimplementedCopilotServiceServer
// for forward compatibility
//
// CopilotService serves copilot search api.
type CopilotServiceServer interface {
	// Search dataservice queries.
	SearchQuery(context.Context, *SearchQueryRequest) (*SearchQueryResponse, error)
	mustEmbedUnimplementedCopilotServiceServer()
}

// UnimplementedCopilotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCopilotServiceServer struct {
}

func (UnimplementedCopilotServiceServer) SearchQuery(context.Context, *SearchQueryRequest) (*SearchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchQuery not implemented")
}
func (UnimplementedCopilotServiceServer) mustEmbedUnimplementedCopilotServiceServer() {}

// UnsafeCopilotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CopilotServiceServer will
// result in compilation errors.
type UnsafeCopilotServiceServer interface {
	mustEmbedUnimplementedCopilotServiceServer()
}

func RegisterCopilotServiceServer(s grpc.ServiceRegistrar, srv CopilotServiceServer) {
	s.RegisterService(&CopilotService_ServiceDesc, srv)
}

func _CopilotService_SearchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CopilotServiceServer).SearchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CopilotService_SearchQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CopilotServiceServer).SearchQuery(ctx, req.(*SearchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CopilotService_ServiceDesc is the grpc.ServiceDesc for CopilotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CopilotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.copilot.v1.CopilotService",
	HandlerType: (*CopilotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchQuery",
			Handler:    _CopilotService_SearchQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/copilot/apiv1/copilot.proto",
}
