// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: public/portworx/pds/catalog/dataserviceversions/apiv1/dataserviceversions.proto

package dataserviceversions

import (
	apiv1 "github.com/portworx/portworxapis/sdk/golang/public/portworx/common/apiv1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enabled indicate either list all, enabled only or disabled only versions.
type ListDataServiceVersionsRequest_Enabled int32

const (
	// List all versions.
	ListDataServiceVersionsRequest_ENABLED_UNSPECIFIED ListDataServiceVersionsRequest_Enabled = 0
	// List only enabled versions.
	ListDataServiceVersionsRequest_TRUE ListDataServiceVersionsRequest_Enabled = 1
	// List only disabled versions.
	ListDataServiceVersionsRequest_FALSE ListDataServiceVersionsRequest_Enabled = 2
)

// Enum value maps for ListDataServiceVersionsRequest_Enabled.
var (
	ListDataServiceVersionsRequest_Enabled_name = map[int32]string{
		0: "ENABLED_UNSPECIFIED",
		1: "TRUE",
		2: "FALSE",
	}
	ListDataServiceVersionsRequest_Enabled_value = map[string]int32{
		"ENABLED_UNSPECIFIED": 0,
		"TRUE":                1,
		"FALSE":               2,
	}
)

func (x ListDataServiceVersionsRequest_Enabled) Enum() *ListDataServiceVersionsRequest_Enabled {
	p := new(ListDataServiceVersionsRequest_Enabled)
	*p = x
	return p
}

func (x ListDataServiceVersionsRequest_Enabled) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListDataServiceVersionsRequest_Enabled) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_enumTypes[0].Descriptor()
}

func (ListDataServiceVersionsRequest_Enabled) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_enumTypes[0]
}

func (x ListDataServiceVersionsRequest_Enabled) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListDataServiceVersionsRequest_Enabled.Descriptor instead.
func (ListDataServiceVersionsRequest_Enabled) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{0, 0}
}

// ListVersionsRequest is the request object for ListVersions.
type ListDataServiceVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID of the data service.
	DataServiceId string `protobuf:"bytes,1,opt,name=data_service_id,json=dataServiceId,proto3" json:"data_service_id,omitempty"`
	// Filter data service versions based on enabled flag.
	Enabled ListDataServiceVersionsRequest_Enabled `protobuf:"varint,2,opt,name=enabled,proto3,enum=public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest_Enabled" json:"enabled,omitempty"`
	// Sorting details using which requested list of Versions to be sorted.
	Sort *apiv1.Sort `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Pagination parameters for listing versions.
	Pagination *apiv1.PageBasedPaginationRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListDataServiceVersionsRequest) Reset() {
	*x = ListDataServiceVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataServiceVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataServiceVersionsRequest) ProtoMessage() {}

func (x *ListDataServiceVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataServiceVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListDataServiceVersionsRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{0}
}

func (x *ListDataServiceVersionsRequest) GetDataServiceId() string {
	if x != nil {
		return x.DataServiceId
	}
	return ""
}

func (x *ListDataServiceVersionsRequest) GetEnabled() ListDataServiceVersionsRequest_Enabled {
	if x != nil {
		return x.Enabled
	}
	return ListDataServiceVersionsRequest_ENABLED_UNSPECIFIED
}

func (x *ListDataServiceVersionsRequest) GetSort() *apiv1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListDataServiceVersionsRequest) GetPagination() *apiv1.PageBasedPaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// ListDataServiceVersionsResponse is the response object for ListVersions.
type ListDataServiceVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of versions of the data service.
	DataServiceVersions []*DataServiceVersion `protobuf:"bytes,1,rep,name=data_service_versions,json=dataServiceVersions,proto3" json:"data_service_versions,omitempty"`
	// Pagination metadata for this response.
	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for pagination. --)
	Pagination *apiv1.PageBasedPaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListDataServiceVersionsResponse) Reset() {
	*x = ListDataServiceVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataServiceVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataServiceVersionsResponse) ProtoMessage() {}

func (x *ListDataServiceVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataServiceVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListDataServiceVersionsResponse) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{1}
}

func (x *ListDataServiceVersionsResponse) GetDataServiceVersions() []*DataServiceVersion {
	if x != nil {
		return x.DataServiceVersions
	}
	return nil
}

func (x *ListDataServiceVersionsResponse) GetPagination() *apiv1.PageBasedPaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// GetDataServiceVersionRequest is the request object for GetVersion.
type GetDataServiceVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID of the version.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDataServiceVersionRequest) Reset() {
	*x = GetDataServiceVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataServiceVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataServiceVersionRequest) ProtoMessage() {}

func (x *GetDataServiceVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataServiceVersionRequest.ProtoReflect.Descriptor instead.
func (*GetDataServiceVersionRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{2}
}

func (x *GetDataServiceVersionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ListCompatibleDataServiceVersionsRequest is the request for ListCompatibleVersions.
type ListCompatibleDataServiceVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of UID of the data service for which compatible data service versions are requested.
	DataServiceIds []string `protobuf:"bytes,1,rep,name=data_service_ids,json=dataServiceIds,proto3" json:"data_service_ids,omitempty"`
	// List of UID of the data service version for which compatible versions are requested.
	DataServiceVersionIds []string `protobuf:"bytes,2,rep,name=data_service_version_ids,json=dataServiceVersionIds,proto3" json:"data_service_version_ids,omitempty"`
	// Sorting details using which requested list of data service versions to be sorted.
	Sort *apiv1.Sort `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Pagination parameters for listing compatible data service versions.
	Pagination *apiv1.PageBasedPaginationRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCompatibleDataServiceVersionsRequest) Reset() {
	*x = ListCompatibleDataServiceVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompatibleDataServiceVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompatibleDataServiceVersionsRequest) ProtoMessage() {}

func (x *ListCompatibleDataServiceVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompatibleDataServiceVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListCompatibleDataServiceVersionsRequest) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{3}
}

func (x *ListCompatibleDataServiceVersionsRequest) GetDataServiceIds() []string {
	if x != nil {
		return x.DataServiceIds
	}
	return nil
}

func (x *ListCompatibleDataServiceVersionsRequest) GetDataServiceVersionIds() []string {
	if x != nil {
		return x.DataServiceVersionIds
	}
	return nil
}

func (x *ListCompatibleDataServiceVersionsRequest) GetSort() *apiv1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListCompatibleDataServiceVersionsRequest) GetPagination() *apiv1.PageBasedPaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// ListCompatibleDataServiceVersionsResponse is the response for ListCompatibleDataServiceVersions.
type ListCompatibleDataServiceVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of compatible versions of the data service.
	CompatibleDataServiceVersions []*CompatibleVersions `protobuf:"bytes,1,rep,name=compatible_data_service_versions,json=compatibleDataServiceVersions,proto3" json:"compatible_data_service_versions,omitempty"`
	// Pagination metadata for this response.
	// (-- api-linter: core::0132::response-unknown-fields=disabled
	//
	//	aip.dev/not-precedent: We need this field for pagination. --)
	Pagination *apiv1.PageBasedPaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCompatibleDataServiceVersionsResponse) Reset() {
	*x = ListCompatibleDataServiceVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompatibleDataServiceVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompatibleDataServiceVersionsResponse) ProtoMessage() {}

func (x *ListCompatibleDataServiceVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompatibleDataServiceVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListCompatibleDataServiceVersionsResponse) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{4}
}

func (x *ListCompatibleDataServiceVersionsResponse) GetCompatibleDataServiceVersions() []*CompatibleVersions {
	if x != nil {
		return x.CompatibleDataServiceVersions
	}
	return nil
}

func (x *ListCompatibleDataServiceVersionsResponse) GetPagination() *apiv1.PageBasedPaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Version represents a particular version of a data service.
type DataServiceVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the resource.
	Meta *apiv1.Meta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Information related to the version.
	Info *Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *DataServiceVersion) Reset() {
	*x = DataServiceVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataServiceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataServiceVersion) ProtoMessage() {}

func (x *DataServiceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataServiceVersion.ProtoReflect.Descriptor instead.
func (*DataServiceVersion) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{5}
}

func (x *DataServiceVersion) GetMeta() *apiv1.Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *DataServiceVersion) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

// Information related to the data service version.
type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled indicates if the version is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// revision ID of the data service version
	RevisionId string `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{6}
}

func (x *Info) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Info) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

// CompatibleVersions contains compatibility information for a particular Version.
type CompatibleVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID of the data service.
	DataServiceId string `protobuf:"bytes,1,opt,name=data_service_id,json=dataServiceId,proto3" json:"data_service_id,omitempty"`
	// Name of the data service.
	DataServiceName string `protobuf:"bytes,2,opt,name=data_service_name,json=dataServiceName,proto3" json:"data_service_name,omitempty"`
	// UID of the data service version.
	DataServiceVersionId string `protobuf:"bytes,3,opt,name=data_service_version_id,json=dataServiceVersionId,proto3" json:"data_service_version_id,omitempty"`
	// Name of the data service version.
	DataServiceVersionName string `protobuf:"bytes,4,opt,name=data_service_version_name,json=dataServiceVersionName,proto3" json:"data_service_version_name,omitempty"`
	// LatestCompatiblePatch contains the highest compatible version that only increases the patch version.
	LatestCompatiblePatch *DataServiceVersion `protobuf:"bytes,5,opt,name=latest_compatible_patch,json=latestCompatiblePatch,proto3" json:"latest_compatible_patch,omitempty"`
	// LatestCompatibleVersions contains the latest patch versions of compatible major/minor versions.
	LatestCompatibleVersions []*DataServiceVersion `protobuf:"bytes,6,rep,name=latest_compatible_versions,json=latestCompatibleVersions,proto3" json:"latest_compatible_versions,omitempty"`
	// CompatibleVersions contains all compatible versions.
	CompatibleVersions []*DataServiceVersion `protobuf:"bytes,7,rep,name=compatible_versions,json=compatibleVersions,proto3" json:"compatible_versions,omitempty"`
}

func (x *CompatibleVersions) Reset() {
	*x = CompatibleVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompatibleVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompatibleVersions) ProtoMessage() {}

func (x *CompatibleVersions) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompatibleVersions.ProtoReflect.Descriptor instead.
func (*CompatibleVersions) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP(), []int{7}
}

func (x *CompatibleVersions) GetDataServiceId() string {
	if x != nil {
		return x.DataServiceId
	}
	return ""
}

func (x *CompatibleVersions) GetDataServiceName() string {
	if x != nil {
		return x.DataServiceName
	}
	return ""
}

func (x *CompatibleVersions) GetDataServiceVersionId() string {
	if x != nil {
		return x.DataServiceVersionId
	}
	return ""
}

func (x *CompatibleVersions) GetDataServiceVersionName() string {
	if x != nil {
		return x.DataServiceVersionName
	}
	return ""
}

func (x *CompatibleVersions) GetLatestCompatiblePatch() *DataServiceVersion {
	if x != nil {
		return x.LatestCompatiblePatch
	}
	return nil
}

func (x *CompatibleVersions) GetLatestCompatibleVersions() []*DataServiceVersion {
	if x != nil {
		return x.LatestCompatibleVersions
	}
	return nil
}

func (x *CompatibleVersions) GetCompatibleVersions() []*DataServiceVersion {
	if x != nil {
		return x.CompatibleVersions
	}
	return nil
}

var File_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto protoreflect.FileDescriptor

var file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDesc = []byte{
	0x0a, 0x4f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f,
	0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x03, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x5a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45,
	0x10, 0x02, 0x22, 0xed, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3c,
	0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x02,
	0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01,
	0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x4b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc1, 0x04, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x7c, 0x0a, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x6f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x89, 0x06, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xfe,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x70, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xd3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x70, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x94, 0x02, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x55, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c,
	0x12, 0x3a, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xaf, 0x01, 0x0a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x18, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x61, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x78, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescOnce sync.Once
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescData = file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDesc
)

func file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescGZIP() []byte {
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescOnce.Do(func() {
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescData)
	})
	return file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDescData
}

var file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_goTypes = []any{
	(ListDataServiceVersionsRequest_Enabled)(0),       // 0: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest.Enabled
	(*ListDataServiceVersionsRequest)(nil),            // 1: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest
	(*ListDataServiceVersionsResponse)(nil),           // 2: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsResponse
	(*GetDataServiceVersionRequest)(nil),              // 3: public.portworx.pds.dataserviceversions.v1.GetDataServiceVersionRequest
	(*ListCompatibleDataServiceVersionsRequest)(nil),  // 4: public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsRequest
	(*ListCompatibleDataServiceVersionsResponse)(nil), // 5: public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsResponse
	(*DataServiceVersion)(nil),                        // 6: public.portworx.pds.dataserviceversions.v1.DataServiceVersion
	(*Info)(nil),                                      // 7: public.portworx.pds.dataserviceversions.v1.Info
	(*CompatibleVersions)(nil),                        // 8: public.portworx.pds.dataserviceversions.v1.CompatibleVersions
	(*apiv1.Sort)(nil),                                // 9: public.portworx.common.v1.Sort
	(*apiv1.PageBasedPaginationRequest)(nil),          // 10: public.portworx.common.v1.PageBasedPaginationRequest
	(*apiv1.PageBasedPaginationResponse)(nil),         // 11: public.portworx.common.v1.PageBasedPaginationResponse
	(*apiv1.Meta)(nil),                                // 12: public.portworx.common.v1.Meta
}
var file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_depIdxs = []int32{
	0,  // 0: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest.enabled:type_name -> public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest.Enabled
	9,  // 1: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest.sort:type_name -> public.portworx.common.v1.Sort
	10, // 2: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationRequest
	6,  // 3: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsResponse.data_service_versions:type_name -> public.portworx.pds.dataserviceversions.v1.DataServiceVersion
	11, // 4: public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsResponse.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationResponse
	9,  // 5: public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsRequest.sort:type_name -> public.portworx.common.v1.Sort
	10, // 6: public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsRequest.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationRequest
	8,  // 7: public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsResponse.compatible_data_service_versions:type_name -> public.portworx.pds.dataserviceversions.v1.CompatibleVersions
	11, // 8: public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsResponse.pagination:type_name -> public.portworx.common.v1.PageBasedPaginationResponse
	12, // 9: public.portworx.pds.dataserviceversions.v1.DataServiceVersion.meta:type_name -> public.portworx.common.v1.Meta
	7,  // 10: public.portworx.pds.dataserviceversions.v1.DataServiceVersion.info:type_name -> public.portworx.pds.dataserviceversions.v1.Info
	6,  // 11: public.portworx.pds.dataserviceversions.v1.CompatibleVersions.latest_compatible_patch:type_name -> public.portworx.pds.dataserviceversions.v1.DataServiceVersion
	6,  // 12: public.portworx.pds.dataserviceversions.v1.CompatibleVersions.latest_compatible_versions:type_name -> public.portworx.pds.dataserviceversions.v1.DataServiceVersion
	6,  // 13: public.portworx.pds.dataserviceversions.v1.CompatibleVersions.compatible_versions:type_name -> public.portworx.pds.dataserviceversions.v1.DataServiceVersion
	1,  // 14: public.portworx.pds.dataserviceversions.v1.DataServiceVersionService.ListDataServiceVersions:input_type -> public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsRequest
	3,  // 15: public.portworx.pds.dataserviceversions.v1.DataServiceVersionService.GetDataServiceVersion:input_type -> public.portworx.pds.dataserviceversions.v1.GetDataServiceVersionRequest
	4,  // 16: public.portworx.pds.dataserviceversions.v1.DataServiceVersionService.ListCompatibleDataServiceVersions:input_type -> public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsRequest
	2,  // 17: public.portworx.pds.dataserviceversions.v1.DataServiceVersionService.ListDataServiceVersions:output_type -> public.portworx.pds.dataserviceversions.v1.ListDataServiceVersionsResponse
	6,  // 18: public.portworx.pds.dataserviceversions.v1.DataServiceVersionService.GetDataServiceVersion:output_type -> public.portworx.pds.dataserviceversions.v1.DataServiceVersion
	5,  // 19: public.portworx.pds.dataserviceversions.v1.DataServiceVersionService.ListCompatibleDataServiceVersions:output_type -> public.portworx.pds.dataserviceversions.v1.ListCompatibleDataServiceVersionsResponse
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() {
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_init()
}
func file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_init() {
	if File_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListDataServiceVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListDataServiceVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataServiceVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListCompatibleDataServiceVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListCompatibleDataServiceVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DataServiceVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CompatibleVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_goTypes,
		DependencyIndexes: file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_depIdxs,
		EnumInfos:         file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_enumTypes,
		MessageInfos:      file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_msgTypes,
	}.Build()
	File_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto = out.File
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_rawDesc = nil
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_goTypes = nil
	file_public_portworx_pds_catalog_dataserviceversions_apiv1_dataserviceversions_proto_depIdxs = nil
}
