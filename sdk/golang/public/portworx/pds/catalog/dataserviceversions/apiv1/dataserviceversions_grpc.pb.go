// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: public/portworx/pds/catalog/dataserviceversions/apiv1/dataserviceversions.proto

package dataserviceversions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataServiceVersionService_ListDataServiceVersions_FullMethodName           = "/public.portworx.pds.dataserviceversions.v1.DataServiceVersionService/ListDataServiceVersions"
	DataServiceVersionService_GetDataServiceVersion_FullMethodName             = "/public.portworx.pds.dataserviceversions.v1.DataServiceVersionService/GetDataServiceVersion"
	DataServiceVersionService_ListCompatibleDataServiceVersions_FullMethodName = "/public.portworx.pds.dataserviceversions.v1.DataServiceVersionService/ListCompatibleDataServiceVersions"
)

// DataServiceVersionServiceClient is the client API for DataServiceVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceVersionServiceClient interface {
	// ListDataServiceVersions lists all the versions of a data service.
	ListDataServiceVersions(ctx context.Context, in *ListDataServiceVersionsRequest, opts ...grpc.CallOption) (*ListDataServiceVersionsResponse, error)
	// GetDataServiceVersion returns a data service version.
	GetDataServiceVersion(ctx context.Context, in *GetDataServiceVersionRequest, opts ...grpc.CallOption) (*DataServiceVersion, error)
	// ListCompatibleDataServiceVersions lists all the data service versions compatible with other version of a data service.
	ListCompatibleDataServiceVersions(ctx context.Context, in *ListCompatibleDataServiceVersionsRequest, opts ...grpc.CallOption) (*ListCompatibleDataServiceVersionsResponse, error)
}

type dataServiceVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceVersionServiceClient(cc grpc.ClientConnInterface) DataServiceVersionServiceClient {
	return &dataServiceVersionServiceClient{cc}
}

func (c *dataServiceVersionServiceClient) ListDataServiceVersions(ctx context.Context, in *ListDataServiceVersionsRequest, opts ...grpc.CallOption) (*ListDataServiceVersionsResponse, error) {
	out := new(ListDataServiceVersionsResponse)
	err := c.cc.Invoke(ctx, DataServiceVersionService_ListDataServiceVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceVersionServiceClient) GetDataServiceVersion(ctx context.Context, in *GetDataServiceVersionRequest, opts ...grpc.CallOption) (*DataServiceVersion, error) {
	out := new(DataServiceVersion)
	err := c.cc.Invoke(ctx, DataServiceVersionService_GetDataServiceVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceVersionServiceClient) ListCompatibleDataServiceVersions(ctx context.Context, in *ListCompatibleDataServiceVersionsRequest, opts ...grpc.CallOption) (*ListCompatibleDataServiceVersionsResponse, error) {
	out := new(ListCompatibleDataServiceVersionsResponse)
	err := c.cc.Invoke(ctx, DataServiceVersionService_ListCompatibleDataServiceVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceVersionServiceServer is the server API for DataServiceVersionService service.
// All implementations must embed UnimplementedDataServiceVersionServiceServer
// for forward compatibility
type DataServiceVersionServiceServer interface {
	// ListDataServiceVersions lists all the versions of a data service.
	ListDataServiceVersions(context.Context, *ListDataServiceVersionsRequest) (*ListDataServiceVersionsResponse, error)
	// GetDataServiceVersion returns a data service version.
	GetDataServiceVersion(context.Context, *GetDataServiceVersionRequest) (*DataServiceVersion, error)
	// ListCompatibleDataServiceVersions lists all the data service versions compatible with other version of a data service.
	ListCompatibleDataServiceVersions(context.Context, *ListCompatibleDataServiceVersionsRequest) (*ListCompatibleDataServiceVersionsResponse, error)
	mustEmbedUnimplementedDataServiceVersionServiceServer()
}

// UnimplementedDataServiceVersionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceVersionServiceServer struct {
}

func (UnimplementedDataServiceVersionServiceServer) ListDataServiceVersions(context.Context, *ListDataServiceVersionsRequest) (*ListDataServiceVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataServiceVersions not implemented")
}
func (UnimplementedDataServiceVersionServiceServer) GetDataServiceVersion(context.Context, *GetDataServiceVersionRequest) (*DataServiceVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataServiceVersion not implemented")
}
func (UnimplementedDataServiceVersionServiceServer) ListCompatibleDataServiceVersions(context.Context, *ListCompatibleDataServiceVersionsRequest) (*ListCompatibleDataServiceVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompatibleDataServiceVersions not implemented")
}
func (UnimplementedDataServiceVersionServiceServer) mustEmbedUnimplementedDataServiceVersionServiceServer() {
}

// UnsafeDataServiceVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceVersionServiceServer will
// result in compilation errors.
type UnsafeDataServiceVersionServiceServer interface {
	mustEmbedUnimplementedDataServiceVersionServiceServer()
}

func RegisterDataServiceVersionServiceServer(s grpc.ServiceRegistrar, srv DataServiceVersionServiceServer) {
	s.RegisterService(&DataServiceVersionService_ServiceDesc, srv)
}

func _DataServiceVersionService_ListDataServiceVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataServiceVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceVersionServiceServer).ListDataServiceVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceVersionService_ListDataServiceVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceVersionServiceServer).ListDataServiceVersions(ctx, req.(*ListDataServiceVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceVersionService_GetDataServiceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataServiceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceVersionServiceServer).GetDataServiceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceVersionService_GetDataServiceVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceVersionServiceServer).GetDataServiceVersion(ctx, req.(*GetDataServiceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServiceVersionService_ListCompatibleDataServiceVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompatibleDataServiceVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceVersionServiceServer).ListCompatibleDataServiceVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServiceVersionService_ListCompatibleDataServiceVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceVersionServiceServer).ListCompatibleDataServiceVersions(ctx, req.(*ListCompatibleDataServiceVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServiceVersionService_ServiceDesc is the grpc.ServiceDesc for DataServiceVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServiceVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.dataserviceversions.v1.DataServiceVersionService",
	HandlerType: (*DataServiceVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataServiceVersions",
			Handler:    _DataServiceVersionService_ListDataServiceVersions_Handler,
		},
		{
			MethodName: "GetDataServiceVersion",
			Handler:    _DataServiceVersionService_GetDataServiceVersion_Handler,
		},
		{
			MethodName: "ListCompatibleDataServiceVersions",
			Handler:    _DataServiceVersionService_ListCompatibleDataServiceVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/catalog/dataserviceversions/apiv1/dataserviceversions.proto",
}
