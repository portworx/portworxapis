// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: public/portworx/pds/catalog/dataservices/apiv1/dataservices.proto

package dataservices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataServicesService_GetDataService_FullMethodName   = "/public.portworx.pds.catalog.dataservices.v1.DataServicesService/GetDataService"
	DataServicesService_ListDataServices_FullMethodName = "/public.portworx.pds.catalog.dataservices.v1.DataServicesService/ListDataServices"
)

// DataServicesServiceClient is the client API for DataServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataServicesService serves the catalog information about the supported data services.
type DataServicesServiceClient interface {
	// GetDataService API returns the the data service resource.
	GetDataService(ctx context.Context, in *GetDataServiceRequest, opts ...grpc.CallOption) (*DataService, error)
	// ListDataServices API lists the the data service resources.
	ListDataServices(ctx context.Context, in *ListDataServicesRequest, opts ...grpc.CallOption) (*ListDataServicesResponse, error)
}

type dataServicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServicesServiceClient(cc grpc.ClientConnInterface) DataServicesServiceClient {
	return &dataServicesServiceClient{cc}
}

func (c *dataServicesServiceClient) GetDataService(ctx context.Context, in *GetDataServiceRequest, opts ...grpc.CallOption) (*DataService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataService)
	err := c.cc.Invoke(ctx, DataServicesService_GetDataService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServicesServiceClient) ListDataServices(ctx context.Context, in *ListDataServicesRequest, opts ...grpc.CallOption) (*ListDataServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataServicesResponse)
	err := c.cc.Invoke(ctx, DataServicesService_ListDataServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServicesServiceServer is the server API for DataServicesService service.
// All implementations must embed UnimplementedDataServicesServiceServer
// for forward compatibility
//
// DataServicesService serves the catalog information about the supported data services.
type DataServicesServiceServer interface {
	// GetDataService API returns the the data service resource.
	GetDataService(context.Context, *GetDataServiceRequest) (*DataService, error)
	// ListDataServices API lists the the data service resources.
	ListDataServices(context.Context, *ListDataServicesRequest) (*ListDataServicesResponse, error)
	mustEmbedUnimplementedDataServicesServiceServer()
}

// UnimplementedDataServicesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServicesServiceServer struct {
}

func (UnimplementedDataServicesServiceServer) GetDataService(context.Context, *GetDataServiceRequest) (*DataService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataService not implemented")
}
func (UnimplementedDataServicesServiceServer) ListDataServices(context.Context, *ListDataServicesRequest) (*ListDataServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataServices not implemented")
}
func (UnimplementedDataServicesServiceServer) mustEmbedUnimplementedDataServicesServiceServer() {}

// UnsafeDataServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServicesServiceServer will
// result in compilation errors.
type UnsafeDataServicesServiceServer interface {
	mustEmbedUnimplementedDataServicesServiceServer()
}

func RegisterDataServicesServiceServer(s grpc.ServiceRegistrar, srv DataServicesServiceServer) {
	s.RegisterService(&DataServicesService_ServiceDesc, srv)
}

func _DataServicesService_GetDataService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServicesServiceServer).GetDataService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServicesService_GetDataService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServicesServiceServer).GetDataService(ctx, req.(*GetDataServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServicesService_ListDataServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServicesServiceServer).ListDataServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServicesService_ListDataServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServicesServiceServer).ListDataServices(ctx, req.(*ListDataServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServicesService_ServiceDesc is the grpc.ServiceDesc for DataServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "public.portworx.pds.catalog.dataservices.v1.DataServicesService",
	HandlerType: (*DataServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataService",
			Handler:    _DataServicesService_GetDataService_Handler,
		},
		{
			MethodName: "ListDataServices",
			Handler:    _DataServicesService_ListDataServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "public/portworx/pds/catalog/dataservices/apiv1/dataservices.proto",
}
