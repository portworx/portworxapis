// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: public/portworx/pds/common/apiv1/podschedulingconfig.proto

package common

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operator represents the operator for the toleration.
type Toleration_Operator int32

const (
	// OPERATOR_UNSPECIFIED is the default value.
	Toleration_OPERATOR_UNSPECIFIED Toleration_Operator = 0
	// EQUAL is the Equal operator.
	Toleration_EQUAL Toleration_Operator = 1
	// EXISTS is the Exists operator.
	Toleration_EXISTS Toleration_Operator = 2
)

// Enum value maps for Toleration_Operator.
var (
	Toleration_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "EQUAL",
		2: "EXISTS",
	}
	Toleration_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"EQUAL":                1,
		"EXISTS":               2,
	}
)

func (x Toleration_Operator) Enum() *Toleration_Operator {
	p := new(Toleration_Operator)
	*p = x
	return p
}

func (x Toleration_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Toleration_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_enumTypes[0].Descriptor()
}

func (Toleration_Operator) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_enumTypes[0]
}

func (x Toleration_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Toleration_Operator.Descriptor instead.
func (Toleration_Operator) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescGZIP(), []int{1, 0}
}

// Effect represents the effect for the toleration.
type Toleration_Effect int32

const (
	// EFFECT_UNSPECIFIED is the default value.
	// Empty toleration effect means match all taint effects.
	Toleration_EFFECT_UNSPECIFIED Toleration_Effect = 0
	// NO_EXECUTE is the NoExecute effect.
	Toleration_NO_EXECUTE Toleration_Effect = 1
	// NO_SCHEDULE is the NoSchedule effect.
	Toleration_NO_SCHEDULE Toleration_Effect = 2
	// PREFER_NO_SCHEDULE is the PreferNoSchedule effect.
	Toleration_PREFER_NO_SCHEDULE Toleration_Effect = 3
)

// Enum value maps for Toleration_Effect.
var (
	Toleration_Effect_name = map[int32]string{
		0: "EFFECT_UNSPECIFIED",
		1: "NO_EXECUTE",
		2: "NO_SCHEDULE",
		3: "PREFER_NO_SCHEDULE",
	}
	Toleration_Effect_value = map[string]int32{
		"EFFECT_UNSPECIFIED": 0,
		"NO_EXECUTE":         1,
		"NO_SCHEDULE":        2,
		"PREFER_NO_SCHEDULE": 3,
	}
)

func (x Toleration_Effect) Enum() *Toleration_Effect {
	p := new(Toleration_Effect)
	*p = x
	return p
}

func (x Toleration_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Toleration_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_enumTypes[1].Descriptor()
}

func (Toleration_Effect) Type() protoreflect.EnumType {
	return &file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_enumTypes[1]
}

func (x Toleration_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Toleration_Effect.Descriptor instead.
func (Toleration_Effect) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescGZIP(), []int{1, 1}
}

// PodSchedulingConfig represents the configuration for scheduling pods.
type PodSchedulingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tolerations to be applied on the application pods.
	Tolerations []*Toleration `protobuf:"bytes,1,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
}

func (x *PodSchedulingConfig) Reset() {
	*x = PodSchedulingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSchedulingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSchedulingConfig) ProtoMessage() {}

func (x *PodSchedulingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSchedulingConfig.ProtoReflect.Descriptor instead.
func (*PodSchedulingConfig) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescGZIP(), []int{0}
}

func (x *PodSchedulingConfig) GetTolerations() []*Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

// Toleration represents a Kubernetes toleration.
type Toleration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key of the toleration.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Operator is the operator for the toleration.
	Operator Toleration_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=public.portworx.pds.common.v1.Toleration_Operator" json:"operator,omitempty"`
	// Value is the value of the toleration.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Effect is the effect for the toleration.
	Effect Toleration_Effect `protobuf:"varint,4,opt,name=effect,proto3,enum=public.portworx.pds.common.v1.Toleration_Effect" json:"effect,omitempty"`
}

func (x *Toleration) Reset() {
	*x = Toleration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toleration) ProtoMessage() {}

func (x *Toleration) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toleration.ProtoReflect.Descriptor instead.
func (*Toleration) Descriptor() ([]byte, []int) {
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescGZIP(), []int{1}
}

func (x *Toleration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Toleration) GetOperator() Toleration_Operator {
	if x != nil {
		return x.Operator
	}
	return Toleration_OPERATOR_UNSPECIFIED
}

func (x *Toleration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Toleration) GetEffect() Toleration_Effect {
	if x != nil {
		return x.Effect
	}
	return Toleration_EFFECT_UNSPECIFIED
}

var File_public_portworx_pds_common_apiv1_podschedulingconfig_proto protoreflect.FileDescriptor

var file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x28, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x13, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x0b,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77,
	0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x0d, 0x0a, 0x0a, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9f, 0x05, 0xba, 0x48, 0x9b, 0x05, 0xba, 0x01, 0x93,
	0x05, 0x12, 0xc1, 0x02, 0x61, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x27, 0x2d,
	0x27, 0x2c, 0x20, 0x27, 0x5f, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x2e, 0x27, 0x2c, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27, 0x4d, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x27, 0x2c, 0x20, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x6d, 0x79, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x27, 0x2c, 0x20, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x31, 0x32, 0x33, 0x2d, 0x61, 0x62, 0x63,
	0x27, 0x2c, 0x20, 0x72, 0x65, 0x67, 0x65, 0x78, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x27, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x2d, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x27, 0x29, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x44, 0x4e, 0x53,
	0x20, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x2f, 0x27, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20,
	0x27, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x27, 0x29, 0x1a, 0xcc, 0x02, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20,
	0x27, 0x27, 0x20, 0x3f, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x27, 0x2f, 0x27, 0x29, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x31,
	0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x27,
	0x2f, 0x27, 0x29, 0x5b, 0x30, 0x5d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x2d, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x24, 0x27, 0x29, 0x29, 0x20, 0x7c, 0x7c,
	0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x28, 0x27, 0x2f, 0x27, 0x29, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x20, 0x26, 0x26, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x27, 0x2f, 0x27, 0x29, 0x5b,
	0x30, 0x5d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2a,
	0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x28, 0x5c, 0x5c, 0x2e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x3f, 0x29, 0x2a, 0x24, 0x27, 0x29,
	0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x27,
	0x2f, 0x27, 0x29, 0x5b, 0x31, 0x5d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x2d, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x41,
	0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x24, 0x27, 0x29, 0x29, 0x20, 0x3a, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x72, 0x02, 0x18, 0x3f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x3f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70,
	0x64, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x3b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x03, 0x3a, 0x8e,
	0x05, 0xba, 0x48, 0x8a, 0x05, 0x1a, 0xcb, 0x01, 0x0a, 0x32, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x60, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x60, 0x6b, 0x65, 0x79, 0x60, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x20, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73,
	0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x1a, 0x33,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x3d, 0x20, 0x27, 0x27, 0x20, 0x26,
	0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20,
	0x21, 0x3d, 0x20, 0x32, 0x20, 0x3f, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x3a, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x1a, 0xb5, 0x02, 0x0a, 0x34, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x5f,
	0x69, 0x73, 0x5f, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d,
	0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6b, 0x38, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x99, 0x01, 0x61,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x2c, 0x20, 0x27, 0x2d, 0x27, 0x2c, 0x20, 0x27, 0x5f, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x2e,
	0x27, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
	0x6e, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x1a, 0x61, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x30, 0x2c, 0x20, 0x31,
	0x5d, 0x20, 0x3f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x28, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x2d, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5f, 0x2e, 0x5d, 0x2a, 0x29, 0x3f, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x24, 0x27, 0x29, 0x20, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x1a, 0x81, 0x01, 0x0a, 0x22,
	0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6f, 0x70, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x65, 0x6d, 0x74,
	0x70, 0x79, 0x12, 0x2d, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x2c, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x20, 0x1a, 0x2c, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x20, 0x3d, 0x3d, 0x20, 0x32, 0x20, 0x3f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x27, 0x27, 0x20, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x42,
	0x80, 0x01, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x64, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x18, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75,
	0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x70, 0x64, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescOnce sync.Once
	file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescData = file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDesc
)

func file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescGZIP() []byte {
	file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescOnce.Do(func() {
		file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescData)
	})
	return file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDescData
}

var file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_goTypes = []interface{}{
	(Toleration_Operator)(0),    // 0: public.portworx.pds.common.v1.Toleration.Operator
	(Toleration_Effect)(0),      // 1: public.portworx.pds.common.v1.Toleration.Effect
	(*PodSchedulingConfig)(nil), // 2: public.portworx.pds.common.v1.PodSchedulingConfig
	(*Toleration)(nil),          // 3: public.portworx.pds.common.v1.Toleration
}
var file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_depIdxs = []int32{
	3, // 0: public.portworx.pds.common.v1.PodSchedulingConfig.tolerations:type_name -> public.portworx.pds.common.v1.Toleration
	0, // 1: public.portworx.pds.common.v1.Toleration.operator:type_name -> public.portworx.pds.common.v1.Toleration.Operator
	1, // 2: public.portworx.pds.common.v1.Toleration.effect:type_name -> public.portworx.pds.common.v1.Toleration.Effect
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_init() }
func file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_init() {
	if File_public_portworx_pds_common_apiv1_podschedulingconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSchedulingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toleration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_goTypes,
		DependencyIndexes: file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_depIdxs,
		EnumInfos:         file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_enumTypes,
		MessageInfos:      file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_msgTypes,
	}.Build()
	File_public_portworx_pds_common_apiv1_podschedulingconfig_proto = out.File
	file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_rawDesc = nil
	file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_goTypes = nil
	file_public_portworx_pds_common_apiv1_podschedulingconfig_proto_depIdxs = nil
}
