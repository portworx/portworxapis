// Please use the following editor setup for this file:
// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
//
// In vim add: au FileType proto setl sw=2 ts=2 expandtab list
//
// In vscode install vscode-proto3 extension and add this to your settings.json:
//    "[proto3]": {
//        "editor.tabSize": 2,
//        "editor.insertSpaces": true,
//        "editor.rulers": [80],
//        "editor.detectIndentation": true,
//        "files.trimTrailingWhitespace": true
//    }
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: public/portworx/platform/configuration/apiv1/dnsconfig.proto

package configuration

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DNS Provider.
type DNSProvider int32

const (
	// Unspecified.
	DNSProvider_DNS_PROVIDER_UNSPECIFIED DNSProvider = 0
	// Portworx managed: Default.
	DNSProvider_PORTWORX_MANAGED DNSProvider = 1
	// BlueCat.
	DNSProvider_BLUECAT DNSProvider = 2
)

// Enum value maps for DNSProvider.
var (
	DNSProvider_name = map[int32]string{
		0: "DNS_PROVIDER_UNSPECIFIED",
		1: "PORTWORX_MANAGED",
		2: "BLUECAT",
	}
	DNSProvider_value = map[string]int32{
		"DNS_PROVIDER_UNSPECIFIED": 0,
		"PORTWORX_MANAGED":         1,
		"BLUECAT":                  2,
	}
)

func (x DNSProvider) Enum() *DNSProvider {
	p := new(DNSProvider)
	*p = x
	return p
}

func (x DNSProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_enumTypes[0].Descriptor()
}

func (DNSProvider) Type() protoreflect.EnumType {
	return &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_enumTypes[0]
}

func (x DNSProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSProvider.Descriptor instead.
func (DNSProvider) EnumDescriptor() ([]byte, []int) {
	return file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescGZIP(), []int{0}
}

// Placeholder for DNS Config.
type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DNS Provider.
	DnsProvider DNSProvider `protobuf:"varint,1,opt,name=dns_provider,json=dnsProvider,proto3,enum=public.portworx.platform.configuration.v1.DNSProvider" json:"dns_provider,omitempty"`
	// Customer managed the external DNS on the cluster.
	CustomerManaged bool `protobuf:"varint,2,opt,name=customer_managed,json=customerManaged,proto3" json:"customer_managed,omitempty"`
	// Provider details.
	//
	// Types that are assignable to ProviderDetails:
	//
	//	*DNSConfig_Bluecat
	ProviderDetails isDNSConfig_ProviderDetails `protobuf_oneof:"provider_details"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescGZIP(), []int{0}
}

func (x *DNSConfig) GetDnsProvider() DNSProvider {
	if x != nil {
		return x.DnsProvider
	}
	return DNSProvider_DNS_PROVIDER_UNSPECIFIED
}

func (x *DNSConfig) GetCustomerManaged() bool {
	if x != nil {
		return x.CustomerManaged
	}
	return false
}

func (m *DNSConfig) GetProviderDetails() isDNSConfig_ProviderDetails {
	if m != nil {
		return m.ProviderDetails
	}
	return nil
}

func (x *DNSConfig) GetBluecat() *BluecatConfig {
	if x, ok := x.GetProviderDetails().(*DNSConfig_Bluecat); ok {
		return x.Bluecat
	}
	return nil
}

type isDNSConfig_ProviderDetails interface {
	isDNSConfig_ProviderDetails()
}

type DNSConfig_Bluecat struct {
	// Bluecat Config.
	Bluecat *BluecatConfig `protobuf:"bytes,10,opt,name=bluecat,proto3,oneof"`
}

func (*DNSConfig_Bluecat) isDNSConfig_ProviderDetails() {}

// Bluecat Config.
type BluecatConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DNS configuration key in bluecat config.
	// (-- api-linter: core::0140::abbreviations=disabled
	//
	//	aip.dev/not-precedent: Pre defined key for bluecat config. --)
	DnsConfiguration string `protobuf:"bytes,1,opt,name=dns_configuration,json=dnsConfiguration,proto3" json:"dns_configuration,omitempty"`
	// DNS View: eg internal.
	DnsView string `protobuf:"bytes,2,opt,name=dns_view,json=dnsView,proto3" json:"dns_view,omitempty"`
	// Root zone of the hosted zone.
	RootZone string `protobuf:"bytes,3,opt,name=root_zone,json=rootZone,proto3" json:"root_zone,omitempty"`
	// Gateway host
	GatewayHost string `protobuf:"bytes,4,opt,name=gateway_host,json=gatewayHost,proto3" json:"gateway_host,omitempty"`
	// Credentials.
	Credentials *BluecatConfig_Credentials `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *BluecatConfig) Reset() {
	*x = BluecatConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluecatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluecatConfig) ProtoMessage() {}

func (x *BluecatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluecatConfig.ProtoReflect.Descriptor instead.
func (*BluecatConfig) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescGZIP(), []int{1}
}

func (x *BluecatConfig) GetDnsConfiguration() string {
	if x != nil {
		return x.DnsConfiguration
	}
	return ""
}

func (x *BluecatConfig) GetDnsView() string {
	if x != nil {
		return x.DnsView
	}
	return ""
}

func (x *BluecatConfig) GetRootZone() string {
	if x != nil {
		return x.RootZone
	}
	return ""
}

func (x *BluecatConfig) GetGatewayHost() string {
	if x != nil {
		return x.GatewayHost
	}
	return ""
}

func (x *BluecatConfig) GetCredentials() *BluecatConfig_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// Credentials.
type BluecatConfig_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway username.
	GatewayUsername string `protobuf:"bytes,1,opt,name=gateway_username,json=gatewayUsername,proto3" json:"gateway_username,omitempty"`
	// Gateway Password.
	GatewayPassword string `protobuf:"bytes,2,opt,name=gateway_password,json=gatewayPassword,proto3" json:"gateway_password,omitempty"`
}

func (x *BluecatConfig_Credentials) Reset() {
	*x = BluecatConfig_Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluecatConfig_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluecatConfig_Credentials) ProtoMessage() {}

func (x *BluecatConfig_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluecatConfig_Credentials.ProtoReflect.Descriptor instead.
func (*BluecatConfig_Credentials) Descriptor() ([]byte, []int) {
	return file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BluecatConfig_Credentials) GetGatewayUsername() string {
	if x != nil {
		return x.GatewayUsername
	}
	return ""
}

func (x *BluecatConfig_Credentials) GetGatewayPassword() string {
	if x != nil {
		return x.GatewayPassword
	}
	return ""
}

var File_public_portworx_platform_configuration_apiv1_dnsconfig_proto protoreflect.FileDescriptor

var file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64,
	0x6e, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x44,
	0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x07, 0x62, 0x6c, 0x75, 0x65, 0x63, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72,
	0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65,
	0x63, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x75,
	0x65, 0x63, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x42, 0x6c, 0x75,
	0x65, 0x63, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x66, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x63, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x63, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a,
	0x4e, 0x0a, 0x0b, 0x44, 0x4e, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4f, 0x52, 0x54, 0x57, 0x4f, 0x52, 0x58, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x55, 0x45, 0x43, 0x41, 0x54, 0x10, 0x02, 0x42,
	0x95, 0x01, 0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x42, 0x0e, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x75, 0x72, 0x65, 0x2d, 0x70, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x78, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescOnce sync.Once
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescData = file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDesc
)

func file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescGZIP() []byte {
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescOnce.Do(func() {
		file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescData)
	})
	return file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDescData
}

var file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_goTypes = []any{
	(DNSProvider)(0),                  // 0: public.portworx.platform.configuration.v1.DNSProvider
	(*DNSConfig)(nil),                 // 1: public.portworx.platform.configuration.v1.DNSConfig
	(*BluecatConfig)(nil),             // 2: public.portworx.platform.configuration.v1.BluecatConfig
	(*BluecatConfig_Credentials)(nil), // 3: public.portworx.platform.configuration.v1.BluecatConfig.Credentials
}
var file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_depIdxs = []int32{
	0, // 0: public.portworx.platform.configuration.v1.DNSConfig.dns_provider:type_name -> public.portworx.platform.configuration.v1.DNSProvider
	2, // 1: public.portworx.platform.configuration.v1.DNSConfig.bluecat:type_name -> public.portworx.platform.configuration.v1.BluecatConfig
	3, // 2: public.portworx.platform.configuration.v1.BluecatConfig.credentials:type_name -> public.portworx.platform.configuration.v1.BluecatConfig.Credentials
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_init() }
func file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_init() {
	if File_public_portworx_platform_configuration_apiv1_dnsconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BluecatConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BluecatConfig_Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes[0].OneofWrappers = []any{
		(*DNSConfig_Bluecat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_goTypes,
		DependencyIndexes: file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_depIdxs,
		EnumInfos:         file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_enumTypes,
		MessageInfos:      file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_msgTypes,
	}.Build()
	File_public_portworx_platform_configuration_apiv1_dnsconfig_proto = out.File
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_rawDesc = nil
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_goTypes = nil
	file_public_portworx_platform_configuration_apiv1_dnsconfig_proto_depIdxs = nil
}
